1. In this lesson, we created the asyncWrapper function in order to eliminate redudancy in our code. With the asyncWrapper function, we are able to wrap our controllers and execute the try, catch blocks with the middleware instead of rewriting it for each controller. 

2. 

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
      return next(createCustomError(`No task with id : ${taskID}`, 404))
  }
  res.status(200).json({ task });
});